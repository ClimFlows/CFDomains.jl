var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CFDomains","category":"page"},{"location":"#CFDomains","page":"Home","title":"CFDomains","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CFDomains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CFDomains]","category":"page"},{"location":"#CFDomains.AbstractDomain","page":"Home","title":"CFDomains.AbstractDomain","text":"Parent type of SpectralDomain and FDDomain\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.FDDomain","page":"Home","title":"CFDomains.FDDomain","text":"FDDomain <: AbstractDomain`\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.HyperDiffusion-Union{Tuple{F}, Tuple{D}, Tuple{D, Any, F, Any}} where {D, F}","page":"Home","title":"CFDomains.HyperDiffusion","text":"filter = Hyperdiffusion(domain, niter, nu, fieldtype::Symbol)\n\nReturn a filter that applies Laplacian diffusion iterated niter times with hyperdiffusive coefficient nu â‰¥ 0 on fields of type fieldtype. Supported field types for domain::VoronoiSphere are :scalar, :vector_curl, :vector_div.\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.SpectralDomain","page":"Home","title":"CFDomains.SpectralDomain","text":"SpectralDomain <: AbstractDomain\n\nparent type of SpectralSphere\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.SpectralSphere","page":"Home","title":"CFDomains.SpectralSphere","text":"Parent type for spherical domains using spherical harmonics.\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.filter!","page":"Home","title":"CFDomains.filter!","text":"# generic\nfiltered = filter!(space, scratch, field, filter::AbstractFilter, dt, mgr::LoopManager)\n\n# out-of-place, allocates `scratch`, allocates and returns `space`\nfiltered = filter!(void, void, field, filter, dt, mgr)\n\n# mutating, non-allocating\nfilter!(filtered, scratch, field, filter, dt, mgr)\n\n# in-place, non-allocating\nfilter!(field, scratch, field, filter, dt, mgr)\n\nApply filter to field during time dt with loop manager mgr. mgr can be nothing. space is the output field, or void. In the latter case, space is allocated as similar(field) or equivalent. scratch is scratch space allocated with scratch_space, or void. In the latter case, scratch is implicitly allocated.\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.laplace_dx-Tuple{CFDomains.VoronoiSphere}","page":"Home","title":"CFDomains.laplace_dx","text":"Estimates the largest eigenvalue -lambda=dx^-2 of the scalar Laplace operator and returns dx which is a (non-dimensional) length on the unit sphere characterizing the mesh resolution. By design, the Courant number for the wave equation with unit wave speed solved with time step dt is dt/dx.\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.periodize!-Tuple{Tuple, CFDomains.AbstractDomain, Vararg{Any}}","page":"Home","title":"CFDomains.periodize!","text":"periodize!(data, box::AbstractBox, mgr)\n\nEnforce horizontally-periodic boundary conditions on array data representing grid point values in box. data may also be a collection, in which case periodize! is applied to each element of the collection. Call periodize! on data obtained by computations involving horizontal averaging/differencing.\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.scratch_space","page":"Home","title":"CFDomains.scratch_space","text":"scratch = scratch_space(filter::AbstractFilter, field, [scratch])\n\nIf scratch is omitted or ::Void, allocate and return scratch space for applying filter to field. Otherwise just return scratch. See also filter!.\n\n\n\n\n\n","category":"function"}]
}
