var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CFDomains","category":"page"},{"location":"#CFDomains","page":"Home","title":"CFDomains","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CFDomains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CFDomains]","category":"page"},{"location":"#CFDomains.AbstractDomain","page":"Home","title":"CFDomains.AbstractDomain","text":"Parent type of SpectralDomain and FDDomain\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.FDDomain","page":"Home","title":"CFDomains.FDDomain","text":"FDDomain <: AbstractDomain`\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.HVLayout","page":"Home","title":"CFDomains.HVLayout","text":"struct HVLayout{rank} end\nlayout = HVLayout(rank)\n\nSingleton type describing a multi-layer data layout where horizontal layers are contiguous in memory. rank is the number of horizontal indices (1 or 2).\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.HyperDiffusion-Union{Tuple{F}, Tuple{D}, Tuple{D, Any, F, Any}} where {D, F}","page":"Home","title":"CFDomains.HyperDiffusion","text":"filter = Hyperdiffusion(domain, niter, nu, fieldtype::Symbol)\n\nReturn a filter that applies Laplacian diffusion iterated niter times with hyperdiffusive coefficient nu â‰¥ 0 on fields of type fieldtype. Supported field types for domain::VoronoiSphere are :scalar, :vector_curl, :vector_div.\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.PressureCoordinate","page":"Home","title":"CFDomains.PressureCoordinate","text":"abstract type PressureCoordinate{N} <: VerticalCoordinate{N} end\n\nParent type for a pressure-based vertical coordinate. Children types should specialize pressure_level and mass_level. See also VerticalCoordinate.\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.Shell","page":"Home","title":"CFDomains.Shell","text":"multi_layer_domain = Shell(nz::Int, layer::AbstractDomain, layout)\n\nReturn a multi-layer domain made of nz layers with data layout specified by layout. Unless you know what you are doing, it is recommended to use rather:\n\nmulti_layer_domain = shell(nz::Int, layer::AbstractDomain)\n\nwhich gets the data layout from data_layout(layer). Otherwise, multi_layer_domain may be non-optimal or non-usable.\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.SigmaCoordinate","page":"Home","title":"CFDomains.SigmaCoordinate","text":"sigma = SigmaCoordinate(N, ptop) <: PressureCoordinate{N}\n\nPressure based sigma-coordinate for N levels with top pressure ptop. Pressure levels are linear in vertical coordinate k :     k/N = (ps-p)/(ps-ptop) where k ranges from 0 (ground) to N (model top).\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.SpectralDomain","page":"Home","title":"CFDomains.SpectralDomain","text":"SpectralDomain <: AbstractDomain\n\nparent type of SpectralSphere\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.SpectralSphere","page":"Home","title":"CFDomains.SpectralSphere","text":"Parent type for spherical domains using spherical harmonics.\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.VHLayout","page":"Home","title":"CFDomains.VHLayout","text":"struct VHLayout{rank} end\nlayout = VHLayout(rank)\n\nSingleton type describing a multi-layer data layout where vertical columnsare contiguous. rank is the number of horizontal indices (1 or 2).\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.VerticalCoordinate","page":"Home","title":"CFDomains.VerticalCoordinate","text":"abstract type VerticalCoordinate{N} end\n\nParent type for generalized vertical coordinates ranging from 0 to N. See also PressureCoordinate.\n\n\n\n\n\n","category":"type"},{"location":"#CFDomains.allocate_field","page":"Home","title":"CFDomains.allocate_field","text":"field = allocate_field(kind::Symbol, domain::AbstractDomain, precision::Type)\n\nAllocate a field of the given kind and precision over the given domain. Typical values for precision are Float32, Float64 or ForwardDiff.Dual. Depending on the domain, valid values for kind may include :scalar, :vector, :scalar_spec, scalar_spat (spectral/spatial representation of a scalar field), :vector_spec, vector_spat (spectral/spatial representation of a vector field).\n\nInternally, allocate_field(kind::Symbol, domain, F) returns allocate_field(Val(kind), domain, F). To specialize allocate_field for MyDomain <: AbstractDomain, one must provide methods for:\n\nallocate_field(::Val{kind}, domain::MyDomain, F)\n\nwhere symbol kind::Symbol is one of the valid field kinds for that domain.\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.allocate_fields","page":"Home","title":"CFDomains.allocate_fields","text":"fields = allocate_fields(kinds::Tuple, domain::AbstractDomain, F::Type)\nfields = allocate_fields(kinds::NamedTuple, domain::AbstractDomain, F::Type)\n\nAllocate a (named) tuple of fields according to the provided kinds. For instance:\n\nfields = allocate_fields((:vector, :scalar), domain, F)\nfields = allocate_fields((a=:vector, b=:scalar), domain, F)\n\nare equivalent to, respectively:\n\nfields = (allocate_field(:vector, domain, F), allocate_field(:scalar, domain, F))\nfields = (a=allocate_field(:vector, domain, F), b=allocate_field(:scalar, domain, F))\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.data_layout-Tuple{CFDomains.Shell}","page":"Home","title":"CFDomains.data_layout","text":"layout = data_layout(shell::Shell)\n\nReturn layout describing the data layout of multi-layer domain shell.\n\nlayout = data_layout(domain::Domain)\n\nReturn layout describing the preferred data layout for a shell made of layers of type Domain.\n\nTypical values for layout are the singletons HVLayout() (layers are contiguous in memory) and VHLayout (columns are contiguous in memory).\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.filter!","page":"Home","title":"CFDomains.filter!","text":"# generic\nfiltered = filter!(space, scratch, field, filter::AbstractFilter, dt, mgr::LoopManager)\n\n# out-of-place, allocates `scratch`, allocates and returns `space`\nfiltered = filter!(void, void, field, filter, dt, mgr)\n\n# mutating, non-allocating\nfilter!(filtered, scratch, field, filter, dt, mgr)\n\n# in-place, non-allocating\nfilter!(field, scratch, field, filter, dt, mgr)\n\nApply filter to field during time dt with loop manager mgr. mgr can be nothing. space is the output field, or void. In the latter case, space is allocated as similar(field) or equivalent. scratch is scratch space allocated with scratch_space, or void. In the latter case, scratch is implicitly allocated.\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.laplace_dx-Tuple{CFDomains.VoronoiSphere}","page":"Home","title":"CFDomains.laplace_dx","text":"Estimates the largest eigenvalue -lambda=dx^-2 of the scalar Laplace operator and returns dx which is a (non-dimensional) length on the unit sphere characterizing the mesh resolution. By design, the Courant number for the wave equation with unit wave speed solved with time step dt is dt/dx.\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.mass_level","page":"Home","title":"CFDomains.mass_level","text":"m = mass_level(k, masstot, vcoord::PressureCoordinate{N})\n\nReturn mass m in level k/2 as prescribed by vertical coordinate vcoord and total mass masstot, i.e. surface pressure minus top pressure.\n\nSo-called full levels correspond to odd values k=1,2...2N-1 while interfaces between full levels (so-called half-levels) correspond to even values k=0,2...2N\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.periodize!-Tuple{Tuple, CFDomains.AbstractDomain, Vararg{Any}}","page":"Home","title":"CFDomains.periodize!","text":"periodize!(data, box::AbstractBox, mgr)\n\nEnforce horizontally-periodic boundary conditions on array data representing grid point values in box. data may also be a collection, in which case periodize! is applied to each element of the collection. Call periodize! on data obtained by computations involving horizontal averaging/differencing.\n\n\n\n\n\n","category":"method"},{"location":"#CFDomains.pressure_level","page":"Home","title":"CFDomains.pressure_level","text":"p = pressure_level(k, ps, vcoord::PressureCoordinate{N})\n\nReturns pressure p corresponding to level k/2 as prescribed by vertical coordinate vcoord and surface pressure ps.\n\nSo-called full levels correspond to odd values k=1,2...2N-1 while interfaces between full levels (so-called half-levels) correspond to even values k=0,2...2N\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.remap_fluxes_ps!","page":"Home","title":"CFDomains.remap_fluxes_ps!","text":"remapfluxesps!(flux, newmg, mg, layout, vcoord::PressureCoordinate)\n\nComputes the target (pseudo-)mass distribution newmg prescribed by pressure-based coordinate vcoord and surface pressure ps, as well as the vertical (pseudo-)mass flux flux needed to remap from current mass distribution mg to target newmg. layout specifies the data layout, see VHLayout and HVLayout.\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.scratch_space","page":"Home","title":"CFDomains.scratch_space","text":"scratch = scratch_space(filter::AbstractFilter, field, [scratch])\n\nIf scratch is omitted or ::Void, allocate and return scratch space for applying filter to field. Otherwise just return scratch. See also filter!.\n\n\n\n\n\n","category":"function"},{"location":"#CFDomains.shell-Tuple{Any, Any}","page":"Home","title":"CFDomains.shell","text":"multi_layer_domain = shell(nz::Int, layer::AbstractDomain)\n\nReturn a multi-layer domain made of nz layers with data layout specified by data_layout(layer).\n\n\n\n\n\n","category":"method"}]
}
